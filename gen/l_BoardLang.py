# Generated from C:/Users/kucht/Documents/Studia/Rok2/S4/Kompilatory/Projekt/BoardLang/antlr/l_BoardLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,59,383,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,
        1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,
        1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
        4,51,339,8,51,11,51,12,51,340,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,3,53,354,8,53,1,54,5,54,357,8,54,10,54,12,54,
        360,9,54,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,5,57,370,8,57,10,
        57,12,57,373,9,57,1,58,4,58,376,8,58,11,58,12,58,377,1,58,1,58,1,
        59,1,59,0,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,0,107,53,
        109,54,111,55,113,56,115,57,117,58,119,59,1,0,6,1,0,48,57,4,0,32,
        32,48,57,65,90,97,122,2,0,48,57,65,70,3,0,65,90,95,95,97,122,5,0,
        45,45,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,386,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
        0,0,103,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
        1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,0,
        3,124,1,0,0,0,5,132,1,0,0,0,7,142,1,0,0,0,9,145,1,0,0,0,11,150,1,
        0,0,0,13,154,1,0,0,0,15,163,1,0,0,0,17,170,1,0,0,0,19,175,1,0,0,
        0,21,180,1,0,0,0,23,186,1,0,0,0,25,193,1,0,0,0,27,204,1,0,0,0,29,
        210,1,0,0,0,31,219,1,0,0,0,33,225,1,0,0,0,35,234,1,0,0,0,37,238,
        1,0,0,0,39,243,1,0,0,0,41,248,1,0,0,0,43,255,1,0,0,0,45,262,1,0,
        0,0,47,268,1,0,0,0,49,270,1,0,0,0,51,272,1,0,0,0,53,274,1,0,0,0,
        55,276,1,0,0,0,57,278,1,0,0,0,59,280,1,0,0,0,61,282,1,0,0,0,63,284,
        1,0,0,0,65,286,1,0,0,0,67,288,1,0,0,0,69,290,1,0,0,0,71,292,1,0,
        0,0,73,294,1,0,0,0,75,296,1,0,0,0,77,299,1,0,0,0,79,302,1,0,0,0,
        81,305,1,0,0,0,83,308,1,0,0,0,85,311,1,0,0,0,87,315,1,0,0,0,89,319,
        1,0,0,0,91,322,1,0,0,0,93,325,1,0,0,0,95,327,1,0,0,0,97,329,1,0,
        0,0,99,333,1,0,0,0,101,335,1,0,0,0,103,338,1,0,0,0,105,342,1,0,0,
        0,107,353,1,0,0,0,109,358,1,0,0,0,111,361,1,0,0,0,113,363,1,0,0,
        0,115,367,1,0,0,0,117,375,1,0,0,0,119,381,1,0,0,0,121,122,5,105,
        0,0,122,123,5,102,0,0,123,2,1,0,0,0,124,125,5,111,0,0,125,126,5,
        116,0,0,126,127,5,104,0,0,127,128,5,101,0,0,128,129,5,114,0,0,129,
        130,5,105,0,0,130,131,5,102,0,0,131,4,1,0,0,0,132,133,5,111,0,0,
        133,134,5,116,0,0,134,135,5,104,0,0,135,136,5,101,0,0,136,137,5,
        114,0,0,137,138,5,119,0,0,138,139,5,105,0,0,139,140,5,115,0,0,140,
        141,5,101,0,0,141,6,1,0,0,0,142,143,5,97,0,0,143,144,5,115,0,0,144,
        8,1,0,0,0,145,146,5,108,0,0,146,147,5,111,0,0,147,148,5,110,0,0,
        148,149,5,103,0,0,149,10,1,0,0,0,150,151,5,102,0,0,151,152,5,111,
        0,0,152,153,5,114,0,0,153,12,1,0,0,0,154,155,5,70,0,0,155,156,5,
        85,0,0,156,157,5,78,0,0,157,158,5,67,0,0,158,159,5,84,0,0,159,160,
        5,73,0,0,160,161,5,79,0,0,161,162,5,78,0,0,162,14,1,0,0,0,163,164,
        5,114,0,0,164,165,5,101,0,0,165,166,5,116,0,0,166,167,5,117,0,0,
        167,168,5,114,0,0,168,169,5,110,0,0,169,16,1,0,0,0,170,171,5,100,
        0,0,171,172,5,114,0,0,172,173,5,97,0,0,173,174,5,119,0,0,174,18,
        1,0,0,0,175,176,5,104,0,0,176,177,5,101,0,0,177,178,5,114,0,0,178,
        179,5,101,0,0,179,20,1,0,0,0,180,181,5,114,0,0,181,182,5,101,0,0,
        182,183,5,115,0,0,183,184,5,101,0,0,184,185,5,116,0,0,185,22,1,0,
        0,0,186,187,5,115,0,0,187,188,5,101,0,0,188,189,5,116,0,0,189,190,
        5,112,0,0,190,191,5,111,0,0,191,192,5,115,0,0,192,24,1,0,0,0,193,
        194,5,98,0,0,194,195,5,111,0,0,195,196,5,97,0,0,196,197,5,114,0,
        0,197,198,5,100,0,0,198,199,5,95,0,0,199,200,5,115,0,0,200,201,5,
        105,0,0,201,202,5,122,0,0,202,203,5,101,0,0,203,26,1,0,0,0,204,205,
        5,98,0,0,205,206,5,114,0,0,206,207,5,101,0,0,207,208,5,97,0,0,208,
        209,5,107,0,0,209,28,1,0,0,0,210,211,5,99,0,0,211,212,5,111,0,0,
        212,213,5,110,0,0,213,214,5,116,0,0,214,215,5,105,0,0,215,216,5,
        110,0,0,216,217,5,117,0,0,217,218,5,101,0,0,218,30,1,0,0,0,219,220,
        5,67,0,0,220,221,5,79,0,0,221,222,5,78,0,0,222,223,5,83,0,0,223,
        224,5,84,0,0,224,32,1,0,0,0,225,226,5,84,0,0,226,227,5,105,0,0,227,
        228,5,108,0,0,228,229,5,101,0,0,229,230,5,84,0,0,230,231,5,121,0,
        0,231,232,5,112,0,0,232,233,5,101,0,0,233,34,1,0,0,0,234,235,5,73,
        0,0,235,236,5,78,0,0,236,237,5,84,0,0,237,36,1,0,0,0,238,239,5,66,
        0,0,239,240,5,79,0,0,240,241,5,79,0,0,241,242,5,76,0,0,242,38,1,
        0,0,0,243,244,5,67,0,0,244,245,5,72,0,0,245,246,5,65,0,0,246,247,
        5,82,0,0,247,40,1,0,0,0,248,249,5,83,0,0,249,250,5,84,0,0,250,251,
        5,82,0,0,251,252,5,73,0,0,252,253,5,78,0,0,253,254,5,71,0,0,254,
        42,1,0,0,0,255,256,5,67,0,0,256,257,5,79,0,0,257,258,5,76,0,0,258,
        259,5,79,0,0,259,260,5,85,0,0,260,261,5,82,0,0,261,44,1,0,0,0,262,
        263,5,65,0,0,263,264,5,82,0,0,264,265,5,82,0,0,265,266,5,65,0,0,
        266,267,5,89,0,0,267,46,1,0,0,0,268,269,5,43,0,0,269,48,1,0,0,0,
        270,271,5,45,0,0,271,50,1,0,0,0,272,273,5,47,0,0,273,52,1,0,0,0,
        274,275,5,37,0,0,275,54,1,0,0,0,276,277,5,42,0,0,277,56,1,0,0,0,
        278,279,5,40,0,0,279,58,1,0,0,0,280,281,5,41,0,0,281,60,1,0,0,0,
        282,283,5,91,0,0,283,62,1,0,0,0,284,285,5,93,0,0,285,64,1,0,0,0,
        286,287,5,123,0,0,287,66,1,0,0,0,288,289,5,125,0,0,289,68,1,0,0,
        0,290,291,5,62,0,0,291,70,1,0,0,0,292,293,5,60,0,0,293,72,1,0,0,
        0,294,295,5,61,0,0,295,74,1,0,0,0,296,297,5,61,0,0,297,298,5,61,
        0,0,298,76,1,0,0,0,299,300,5,33,0,0,300,301,5,61,0,0,301,78,1,0,
        0,0,302,303,5,62,0,0,303,304,5,61,0,0,304,80,1,0,0,0,305,306,5,60,
        0,0,306,307,5,61,0,0,307,82,1,0,0,0,308,309,5,79,0,0,309,310,5,82,
        0,0,310,84,1,0,0,0,311,312,5,65,0,0,312,313,5,78,0,0,313,314,5,68,
        0,0,314,86,1,0,0,0,315,316,5,78,0,0,316,317,5,79,0,0,317,318,5,84,
        0,0,318,88,1,0,0,0,319,320,5,43,0,0,320,321,5,43,0,0,321,90,1,0,
        0,0,322,323,5,45,0,0,323,324,5,45,0,0,324,92,1,0,0,0,325,326,5,58,
        0,0,326,94,1,0,0,0,327,328,5,39,0,0,328,96,1,0,0,0,329,330,5,226,
        0,0,330,331,5,8364,0,0,331,332,5,347,0,0,332,98,1,0,0,0,333,334,
        5,44,0,0,334,100,1,0,0,0,335,336,5,36,0,0,336,102,1,0,0,0,337,339,
        3,105,52,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,
        1,0,0,0,341,104,1,0,0,0,342,343,7,0,0,0,343,106,1,0,0,0,344,345,
        5,84,0,0,345,346,5,82,0,0,346,347,5,85,0,0,347,354,5,69,0,0,348,
        349,5,70,0,0,349,350,5,65,0,0,350,351,5,76,0,0,351,352,5,83,0,0,
        352,354,5,69,0,0,353,344,1,0,0,0,353,348,1,0,0,0,354,108,1,0,0,0,
        355,357,3,111,55,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,
        0,358,359,1,0,0,0,359,110,1,0,0,0,360,358,1,0,0,0,361,362,7,1,0,
        0,362,112,1,0,0,0,363,364,5,35,0,0,364,365,7,2,0,0,365,366,6,56,
        0,0,366,114,1,0,0,0,367,371,7,3,0,0,368,370,7,4,0,0,369,368,1,0,
        0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,116,1,0,
        0,0,373,371,1,0,0,0,374,376,7,5,0,0,375,374,1,0,0,0,376,377,1,0,
        0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,6,58,
        1,0,380,118,1,0,0,0,381,382,5,35,0,0,382,120,1,0,0,0,6,0,340,353,
        358,371,377,2,1,56,0,6,0,0
    ]

class l_BoardLang(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF_T = 1
    OTHERIF_T = 2
    OTHERWISE_T = 3
    AS_T = 4
    LONG_T = 5
    FOR_T = 6
    FUNCTION_T = 7
    RETURN_T = 8
    DRAW_T = 9
    HERE_T = 10
    RESET_T = 11
    SETPOS = 12
    BOARDSIZE_T = 13
    BREAK = 14
    CONTINUE = 15
    CONST = 16
    TT = 17
    INT_T = 18
    BOOL_T = 19
    CHAR_T = 20
    STRING_T = 21
    COLOUR_T = 22
    ARRAY_T = 23
    PLUS = 24
    MINUS = 25
    DIVIDE = 26
    MOD = 27
    MULTIPLY = 28
    LEFT_PAR = 29
    RIGHT_PAR = 30
    LEFT_SQUARE_PAR = 31
    RIGHT_SQUARE_PAR = 32
    LEFT_CLAMP_PAR = 33
    RIGHT_CLAMP_PAR = 34
    GT = 35
    LT = 36
    EQ = 37
    CHECK_EQ = 38
    NOT_EQ = 39
    GTOREQ = 40
    LTOREQ = 41
    OR_T = 42
    AND_T = 43
    NOT_T = 44
    PLUSPLUS = 45
    MINUSMINUS = 46
    COLON = 47
    QUOT_SINGLE = 48
    QUOT_DOUBLE = 49
    COMA = 50
    END_M = 51
    INT_V = 52
    BOOL_V = 53
    STRING_V = 54
    CHAR_V = 55
    COLOUR_V = 56
    ID = 57
    WS = 58
    COMMENT = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'otherif'", "'otherwise'", "'as'", "'long'", "'for'", 
            "'FUNCTION'", "'return'", "'draw'", "'here'", "'reset'", "'setpos'", 
            "'board_size'", "'break'", "'continue'", "'CONST'", "'TileType'", 
            "'INT'", "'BOOL'", "'CHAR'", "'STRING'", "'COLOUR'", "'ARRAY'", 
            "'+'", "'-'", "'/'", "'%'", "'*'", "'('", "')'", "'['", "']'", 
            "'{'", "'}'", "'>'", "'<'", "'='", "'=='", "'!='", "'>='", "'<='", 
            "'OR'", "'AND'", "'NOT'", "'++'", "'--'", "':'", "'''", "'\\u00E2\\u20AC\\u015B'", 
            "','", "'$'", "'#'" ]

    symbolicNames = [ "<INVALID>",
            "IF_T", "OTHERIF_T", "OTHERWISE_T", "AS_T", "LONG_T", "FOR_T", 
            "FUNCTION_T", "RETURN_T", "DRAW_T", "HERE_T", "RESET_T", "SETPOS", 
            "BOARDSIZE_T", "BREAK", "CONTINUE", "CONST", "TT", "INT_T", 
            "BOOL_T", "CHAR_T", "STRING_T", "COLOUR_T", "ARRAY_T", "PLUS", 
            "MINUS", "DIVIDE", "MOD", "MULTIPLY", "LEFT_PAR", "RIGHT_PAR", 
            "LEFT_SQUARE_PAR", "RIGHT_SQUARE_PAR", "LEFT_CLAMP_PAR", "RIGHT_CLAMP_PAR", 
            "GT", "LT", "EQ", "CHECK_EQ", "NOT_EQ", "GTOREQ", "LTOREQ", 
            "OR_T", "AND_T", "NOT_T", "PLUSPLUS", "MINUSMINUS", "COLON", 
            "QUOT_SINGLE", "QUOT_DOUBLE", "COMA", "END_M", "INT_V", "BOOL_V", 
            "STRING_V", "CHAR_V", "COLOUR_V", "ID", "WS", "COMMENT" ]

    ruleNames = [ "IF_T", "OTHERIF_T", "OTHERWISE_T", "AS_T", "LONG_T", 
                  "FOR_T", "FUNCTION_T", "RETURN_T", "DRAW_T", "HERE_T", 
                  "RESET_T", "SETPOS", "BOARDSIZE_T", "BREAK", "CONTINUE", 
                  "CONST", "TT", "INT_T", "BOOL_T", "CHAR_T", "STRING_T", 
                  "COLOUR_T", "ARRAY_T", "PLUS", "MINUS", "DIVIDE", "MOD", 
                  "MULTIPLY", "LEFT_PAR", "RIGHT_PAR", "LEFT_SQUARE_PAR", 
                  "RIGHT_SQUARE_PAR", "LEFT_CLAMP_PAR", "RIGHT_CLAMP_PAR", 
                  "GT", "LT", "EQ", "CHECK_EQ", "NOT_EQ", "GTOREQ", "LTOREQ", 
                  "OR_T", "AND_T", "NOT_T", "PLUSPLUS", "MINUSMINUS", "COLON", 
                  "QUOT_SINGLE", "QUOT_DOUBLE", "COMA", "END_M", "INT_V", 
                  "DIGIT", "BOOL_V", "STRING_V", "CHAR_V", "COLOUR_V", "ID", 
                  "WS", "COMMENT" ]

    grammarFileName = "l_BoardLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[56] = self.COLOUR_V_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def COLOUR_V_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            6
     


